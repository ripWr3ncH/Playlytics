================================================================================
PLAYLYTICS - FOOTBALL MATCH ANALYTICS SYSTEM
================================================================================

PROJECT OVERVIEW
----------------
A web-based football/soccer statistics management system with real-time match 
tracking, league standings, team/player management, and an admin panel for 
complete CRUD operations. Built as an educational database project demonstrating 
SQL concepts and relationships.

================================================================================
DATABASE SCHEMA
================================================================================

1. USERS
   - id (PK)
   - name
   - email (unique)
   - password (hashed)
   - is_admin (boolean)
   - timestamps

2. LEAGUES
   - id (PK)
   - name
   - slug (unique, URL-friendly)
   - country
   - logo (nullable)
   - season (e.g., "2024-25")
   - is_active (boolean, default: true)
   - timestamps

3. TEAMS
   - id (PK)
   - name
   - slug (unique)
   - league_id (FK → leagues)
   - city (nullable)
   - founded (year, nullable)
   - logo (nullable)
   - description (nullable)
   - timestamps

4. PLAYERS
   - id (PK)
   - name
   - slug (unique)
   - team_id (FK → teams)
   - position (nullable)
   - age (nullable)
   - nationality (nullable)
   - timestamps

5. FOOTBALL_MATCHES
   - id (PK)
   - league_id (FK → leagues)
   - home_team_id (FK → teams)
   - away_team_id (FK → teams)
   - match_date (datetime)
   - home_score (nullable)
   - away_score (nullable)
   - status (enum: scheduled, live, finished, postponed, cancelled)
   - minute (nullable, for live matches)
   - venue (nullable)
   - attendance (nullable)
   - referee (nullable)
   - matchweek (nullable)
   - events (JSON: goals, cards, substitutions)
   - timestamps

6. PLAYER_STATS
   - id (PK)
   - match_id (FK → football_matches)
   - player_id (FK → players)
   - goals (default: 0)
   - assists (default: 0)
   - minutes_played (default: 0)
   - yellow_cards (default: 0)
   - red_cards (default: 0)
   - timestamps

================================================================================
RELATIONSHIPS
================================================================================

League → Teams (One-to-Many)
League → Matches (One-to-Many)
Team → Players (One-to-Many)
Team → Home Matches (One-to-Many)
Team → Away Matches (One-to-Many)
Match → Home Team (Many-to-One)
Match → Away Team (Many-to-One)
Match → Player Stats (One-to-Many)
Player → Player Stats (One-to-Many)

Cascading Rules:
- Delete league → cascade delete teams and matches
- Delete team → cascade delete players and matches
- Delete match → cascade delete player stats

================================================================================
FEATURES & FUNCTIONALITY
================================================================================

PUBLIC FRONTEND
---------------

1. HOME DASHBOARD
   - Display live matches (status: live)
   - Today's fixtures
   - Recent results (status: finished)
   - Upcoming matches
   - League navigation
   - Auto-refresh live scores (30-second interval)

2. LEAGUES
   - List all active leagues
   - League details page
   - League standings/table
   - Filter matches by league
   - Team count display

3. TEAMS
   - Browse all teams
   - Team profile pages
   - Player roster display
   - Team statistics
   - Match history
   - League affiliation

4. PLAYERS
   - Player listing with filters
   - Player profile pages
   - Team affiliation
   - Position and nationality
   - Career statistics

5. MATCHES
   - Match listing with date filters
   - Live match page (auto-updating scores)
   - Match detail page:
     * Team lineups
     * Match events (goals, cards, substitutions)
     * Match statistics
     * Head-to-head history
     * External search links (highlights, reports)
   - Filter by:
     * Date (calendar navigation)
     * League
     * Status

ADMIN PANEL (Authentication Required)
--------------------------------------

1. AUTHENTICATION
   - Login page
   - Session management
   - Admin middleware protection
   - Logout functionality

2. DASHBOARD
   - Summary statistics:
     * Total leagues count
     * Total teams count
     * Total players count
     * Total matches count
   - Quick action buttons
   - Database overview information

3. LEAGUE MANAGEMENT (CRUD)
   - List all leagues with team/match counts
   - Create new league:
     * Name (required)
     * Slug (auto-generated from name if empty)
     * Country
     * Season
     * Description
   - Edit existing league
   - Delete league (with cascade warning)
   - Validation: unique slug, required name

4. TEAM MANAGEMENT (CRUD)
   - List all teams with league and player count
   - Create new team:
     * Name (required)
     * Slug (auto-generated)
     * League selection (required)
     * City
     * Founded year (1800-current)
     * Description
   - Edit existing team
   - Delete team
   - Validation: unique slug, valid league_id

5. PLAYER MANAGEMENT (CRUD)
   - List all players with team and league
   - Create new player:
     * Name (required)
     * Slug (auto-generated)
     * Team selection (required)
     * Position
     * Age (16-50)
     * Nationality
   - Edit existing player
   - Delete player
   - Validation: unique slug, valid team_id

6. MATCH MANAGEMENT (CRUD)
   - List all matches with teams and scores
   - Create/Schedule match:
     * Home team selection (required)
     * Away team selection (required, different from home)
     * League selection (required)
     * Match date
     * Home score
     * Away score
     * Status (scheduled/live/finished/postponed/cancelled)
   - Edit match (update scores, status)
   - Delete match
   - Validation: different home/away teams, valid foreign keys

7. SQL QUERY LOGS (Educational)
   - Display example SQL queries with explanations:
     * INNER JOIN (matches with team names)
     * LEFT JOIN with COUNT and GROUP BY (players per team)
     * Subqueries (teams with most players)
     * Complex aggregations with CASE statements (league statistics)
   - Purpose and educational notes for each query
   - Database relationship diagrams
   - SQL concepts demonstrated

================================================================================
VALIDATION RULES
================================================================================

LEAGUES:
- name: required, max 255 chars
- slug: nullable, unique, max 255 chars
- country: nullable, max 255 chars
- season: required
- is_active: boolean

TEAMS:
- name: required, max 255 chars
- slug: nullable, unique, max 255 chars
- league_id: required, must exist in leagues
- city: nullable, max 255 chars
- founded: nullable, integer, 1800-current year
- description: nullable

PLAYERS:
- name: required, max 255 chars
- slug: nullable, unique, max 255 chars
- team_id: required, must exist in teams
- position: nullable, max 255 chars
- age: nullable, integer, 16-50
- nationality: nullable, max 255 chars

MATCHES:
- home_team_id: required, must exist in teams
- away_team_id: required, must exist in teams, different from home_team_id
- league_id: required, must exist in leagues
- match_date: nullable, valid datetime
- home_score: nullable, integer, min 0
- away_score: nullable, integer, min 0
- status: required, enum values only

================================================================================
BUSINESS LOGIC
================================================================================

1. AUTO-SLUG GENERATION
   - If slug is empty, automatically generate from name
   - Convert to lowercase, replace spaces with hyphens
   - Ensure uniqueness

2. MATCH STATUS WORKFLOW
   - scheduled → live → finished
   - Can be postponed or cancelled at any stage

3. LIVE SCORE UPDATES
   - Frontend polls API every 30 seconds for live matches
   - Only updates matches with status = 'live'
   - Updates scores and minute counter

4. RELATIONSHIP INTEGRITY
   - Cannot delete league if it has teams
   - Cannot delete team if it has players or matches
   - Foreign key constraints enforced

5. DUPLICATE PREVENTION
   - Same match (home/away teams + date) tracked by unique ID
   - Slug uniqueness prevents duplicate URLs

6. DATA FILTERING
   - Matches filtered by date (default: today)
   - Matches filtered by league
   - Players filtered by team
   - Teams filtered by league

================================================================================
API ENDPOINTS (Optional/Future)
================================================================================

GET    /api/live-scores           - Fetch all live matches
POST   /api/live-scores/update    - Update match scores
GET    /api/match-events/{id}     - Get match events (goals, cards)

================================================================================
SQL CONCEPTS DEMONSTRATED
================================================================================

1. Table Creation & Schema Design
2. Primary Keys (AUTO_INCREMENT)
3. Foreign Keys with CASCADE
4. Unique Constraints
5. ENUM Types
6. JSON Data Types
7. Timestamps (created_at, updated_at)

8. INNER JOIN (multiple tables)
9. LEFT JOIN (with NULL handling)
10. COUNT Aggregate Function
11. AVG Aggregate Function
12. GROUP BY (single and multiple columns)
13. ORDER BY (ASC/DESC)
14. WHERE Clauses
15. Subqueries (correlated and non-correlated)
16. CASE Statements
17. DISTINCT Values
18. LIMIT and Pagination

19. INSERT Statements (Create)
20. SELECT Statements (Read)
21. UPDATE Statements (Update)
22. DELETE Statements (Delete)
23. Data Validation
24. Transaction Management

================================================================================
USER INTERFACE PATTERNS
================================================================================

PUBLIC PAGES:
- Responsive design (mobile-first)
- Dark/light theme toggle
- Navigation bar with league links
- Match cards with live indicators
- Team logos and league badges
- Date picker for match filtering
- Search functionality
- Breadcrumb navigation

ADMIN PANEL:
- Sidebar navigation
- Dashboard with statistics cards
- Data tables with sorting
- Form validation with error messages
- Success/error notifications
- Confirmation dialogs for delete operations
- Responsive forms
- Quick action buttons

================================================================================
TECH STACK (Example - Laravel)
================================================================================

Backend:
- PHP 8.2+
- Laravel 11.x Framework
- MySQL Database
- Eloquent ORM

Frontend:
- Blade Templating
- Bootstrap 5 / Tailwind CSS
- JavaScript (Vanilla)
- Font Awesome Icons

Authentication:
- Laravel Session-based Auth
- Middleware Protection
- Password Hashing (bcrypt)

================================================================================
FILE STRUCTURE
================================================================================

app/
├── Models/
│   ├── User.php
│   ├── League.php
│   ├── Team.php
│   ├── Player.php
│   ├── FootballMatch.php
│   └── PlayerStat.php
│
├── Http/Controllers/
│   ├── HomeController.php
│   ├── LeagueController.php
│   ├── TeamController.php
│   ├── PlayerController.php
│   ├── MatchController.php
│   └── Admin/
│       ├── AuthController.php
│       └── AdminController.php
│
└── Http/Middleware/
    └── AdminMiddleware.php

database/
├── migrations/
│   ├── create_users_table.php
│   ├── create_leagues_table.php
│   ├── create_teams_table.php
│   ├── create_players_table.php
│   ├── create_football_matches_table.php
│   └── create_player_stats_table.php
│
└── seeders/
    ├── LeagueSeeder.php
    ├── TeamSeeder.php
    └── MatchSeeder.php

resources/
├── views/
│   ├── layouts/
│   │   └── app.blade.php
│   ├── home.blade.php
│   ├── leagues/
│   ├── teams/
│   ├── players/
│   ├── matches/
│   └── admin/
│       ├── layout.blade.php
│       ├── dashboard.blade.php
│       ├── leagues/
│       ├── teams/
│       ├── players/
│       ├── matches/
│       └── sql-logs.blade.php
│
└── js/
    └── live-scores.js

routes/
└── web.php (all route definitions)

================================================================================
ROUTES STRUCTURE
================================================================================

PUBLIC ROUTES:
GET  /                           - Home page
GET  /leagues                    - List leagues
GET  /leagues/{slug}             - League details
GET  /leagues/{slug}/standings   - League standings
GET  /teams                      - List teams
GET  /teams/{slug}               - Team details
GET  /players                    - List players
GET  /players/{slug}             - Player details
GET  /matches                    - List matches
GET  /matches/live               - Live matches page
GET  /matches/{id}               - Match details

ADMIN ROUTES (Protected):
GET  /admin/login                - Admin login page
POST /admin/login                - Process login
POST /admin/logout               - Logout

GET  /admin/dashboard            - Admin dashboard

GET  /admin/leagues              - List leagues
GET  /admin/leagues/create       - Create league form
POST /admin/leagues              - Store new league
GET  /admin/leagues/{id}/edit    - Edit league form
PUT  /admin/leagues/{id}         - Update league
DEL  /admin/leagues/{id}         - Delete league

GET  /admin/teams                - List teams
GET  /admin/teams/create         - Create team form
POST /admin/teams                - Store new team
GET  /admin/teams/{id}/edit      - Edit team form
PUT  /admin/teams/{id}           - Update team
DEL  /admin/teams/{id}           - Delete team

GET  /admin/players              - List players
GET  /admin/players/create       - Create player form
POST /admin/players              - Store new player
GET  /admin/players/{id}/edit    - Edit player form
PUT  /admin/players/{id}         - Update player
DEL  /admin/players/{id}         - Delete player

GET  /admin/matches              - List matches
GET  /admin/matches/create       - Create match form
POST /admin/matches              - Store new match
GET  /admin/matches/{id}/edit    - Edit match form
PUT  /admin/matches/{id}         - Update match
DEL  /admin/matches/{id}         - Delete match

GET  /admin/sql-logs             - SQL query demonstrations

================================================================================
KEY ALGORITHMS & LOGIC
================================================================================

1. LIVE SCORE UPDATE (JavaScript)
   - setInterval every 30 seconds
   - Fetch /api/live-scores
   - Update DOM elements with new scores
   - Show live indicator animation

2. SLUG GENERATION
   - Take name string
   - Convert to lowercase
   - Replace spaces with hyphens
   - Remove special characters
   - Ensure uniqueness in database

3. MATCH FILTERING
   - Default: today's date
   - Allow date range selection
   - Filter by league_id
   - Filter by status
   - Combine multiple filters with AND

4. HEAD-TO-HEAD CALCULATION
   - Find all matches where:
     (home_team = A AND away_team = B) OR
     (home_team = B AND away_team = A)
   - Order by date descending
   - Limit to recent 5-10 matches

5. LEAGUE STANDINGS
   - For each team in league:
     * Played = COUNT(matches)
     * Won = COUNT(matches WHERE score_diff > 0)
     * Drawn = COUNT(matches WHERE score_diff = 0)
     * Lost = COUNT(matches WHERE score_diff < 0)
     * Goals For = SUM(goals_scored)
     * Goals Against = SUM(goals_conceded)
     * Goal Difference = Goals For - Goals Against
     * Points = (Won * 3) + (Drawn * 1)
   - Order by Points DESC, Goal Difference DESC

================================================================================
EXAMPLE SQL QUERIES
================================================================================

1. Get all matches with team names (INNER JOIN):
   SELECT m.*, ht.name as home_team, at.name as away_team, l.name as league
   FROM football_matches m
   JOIN teams ht ON m.home_team_id = ht.id
   JOIN teams at ON m.away_team_id = at.id
   JOIN leagues l ON m.league_id = l.id
   ORDER BY m.match_date DESC;

2. Count players per team (LEFT JOIN + GROUP BY):
   SELECT t.name, COUNT(p.id) as player_count
   FROM teams t
   LEFT JOIN players p ON t.id = p.team_id
   GROUP BY t.id, t.name
   ORDER BY player_count DESC;

3. Teams with most players (Subquery):
   SELECT t.name,
          (SELECT COUNT(*) FROM players p WHERE p.team_id = t.id) as count
   FROM teams t
   WHERE (SELECT COUNT(*) FROM players p WHERE p.team_id = t.id) > 0
   ORDER BY count DESC;

4. League statistics (Complex with CASE):
   SELECT l.name,
          COUNT(DISTINCT t.id) as total_teams,
          COUNT(DISTINCT p.id) as total_players,
          COUNT(DISTINCT m.id) as total_matches,
          ROUND(AVG(CASE WHEN m.status = 'finished' 
                    THEN (m.home_score + m.away_score) END), 2) as avg_goals
   FROM leagues l
   LEFT JOIN teams t ON l.id = t.league_id
   LEFT JOIN players p ON t.id = p.team_id
   LEFT JOIN football_matches m ON l.id = m.league_id
   GROUP BY l.id, l.name
   ORDER BY total_teams DESC;

================================================================================
DEPLOYMENT CONSIDERATIONS
================================================================================

1. Environment Variables:
   - Database credentials
   - Admin user credentials
   - API keys (if using external APIs)
   - App URL and timezone

2. Database Setup:
   - Run migrations to create tables
   - Run seeders for initial data (leagues, teams)
   - Create admin user

3. Security:
   - Hash all passwords
   - Protect admin routes with middleware
   - Validate all user inputs
   - Use CSRF tokens for forms
   - Sanitize database queries (use ORM)
   - Set proper file permissions

4. Performance:
   - Index foreign keys
   - Index slug columns
   - Cache frequently accessed data
   - Optimize database queries
   - Use eager loading for relationships

5. Testing:
   - Unit tests for models
   - Integration tests for controllers
   - Test CRUD operations
   - Test validation rules
   - Test relationships

================================================================================
USE CASES
================================================================================

1. Educational Database Project
   - Demonstrate SQL concepts
   - Show table relationships
   - Practice CRUD operations
   - Learn query optimization

2. Sports Analytics Platform
   - Track match results
   - Display live scores
   - Analyze team performance
   - Player statistics tracking

3. League Management System
   - Organize competitions
   - Schedule matches
   - Update results
   - Generate standings

4. Content Management
   - Admin panel for data entry
   - Public-facing website
   - Real-time updates
   - Search and filtering

================================================================================
END OF REFERENCE DOCUMENT
================================================================================
