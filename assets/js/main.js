// ==============================================================
// PLAYLYTICS - Main JavaScript File
// ==============================================================

// SQL Viewer Modal Functions
function openSQLViewer() {
    document.getElementById('sqlModal').style.display = 'block';
    document.body.style.overflow = 'hidden';
}

function closeSQLViewer() {
    document.getElementById('sqlModal').style.display = 'none';
    document.body.style.overflow = 'auto';
}

function clearSQLLog() {
    if (confirm('Are you sure you want to clear the SQL query log?')) {
        document.getElementById('queryLogContainer').innerHTML = 
            '<p class="no-queries">Query log cleared.</p>';
    }
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('sqlModal');
    if (event.target == modal) {
        closeSQLViewer();
    }
}

// Close modal with Escape key
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeSQLViewer();
    }
});

// Auto-refresh live matches every 30 seconds
let liveMatchRefreshInterval;

function startLiveMatchRefresh() {
    // Only start if we're on a page with live matches
    const liveMatches = document.querySelectorAll('.status-live');
    if (liveMatches.length > 0) {
        liveMatchRefreshInterval = setInterval(function() {
            refreshLiveMatches();
        }, 30000); // 30 seconds
    }
}

function refreshLiveMatches() {
    console.log('Refreshing live matches...');
    // In a real application, this would make an AJAX call
    // For this demo, we'll just log the action
    
    // Example AJAX call (commented out):
    /*
    fetch('api/live-matches.php')
        .then(response => response.json())
        .then(data => {
            updateMatchScores(data);
        })
        .catch(error => console.error('Error:', error));
    */
}

function updateMatchScores(matches) {
    matches.forEach(match => {
        const matchCard = document.querySelector(`[data-match-id="${match.id}"]`);
        if (matchCard) {
            const homeScore = matchCard.querySelector('.home-score');
            const awayScore = matchCard.querySelector('.away-score');
            const minute = matchCard.querySelector('.match-minute');
            
            if (homeScore) homeScore.textContent = match.home_score;
            if (awayScore) awayScore.textContent = match.away_score;
            if (minute) minute.textContent = match.minute + "'";
        }
    });
}

// Confirm delete actions
function confirmDelete(message) {
    return confirm(message || 'Are you sure you want to delete this item?');
}

// Form validation
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form) return true;
    
    const requiredFields = form.querySelectorAll('[required]');
    let isValid = true;
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            field.style.borderColor = 'var(--danger-color)';
            isValid = false;
        } else {
            field.style.borderColor = 'var(--border-color)';
        }
    });
    
    if (!isValid) {
        alert('Please fill in all required fields.');
    }
    
    return isValid;
}

// Generate slug from name
function generateSlug(name) {
    return name
        .toLowerCase()
        .trim()
        .replace(/[^\w\s-]/g, '')
        .replace(/[\s_-]+/g, '-')
        .replace(/^-+|-+$/g, '');
}

// Auto-generate slug on name input
function setupSlugGeneration(nameFieldId, slugFieldId) {
    const nameField = document.getElementById(nameFieldId);
    const slugField = document.getElementById(slugFieldId);
    
    if (nameField && slugField) {
        nameField.addEventListener('input', function() {
            if (!slugField.value || slugField.dataset.autoGenerated === 'true') {
                slugField.value = generateSlug(this.value);
                slugField.dataset.autoGenerated = 'true';
            }
        });
        
        slugField.addEventListener('input', function() {
            this.dataset.autoGenerated = 'false';
        });
    }
}

// Show notification
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `alert alert-${type}`;
    notification.textContent = message;
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.zIndex = '3000';
    notification.style.minWidth = '300px';
    notification.style.animation = 'slideIn 0.3s';
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 3000);
}

// Format date for display
function formatDate(dateString) {
    const date = new Date(dateString);
    const options = {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    };
    return date.toLocaleDateString('en-US', options);
}

// Table sorting
function sortTable(tableId, columnIndex) {
    const table = document.getElementById(tableId);
    if (!table) return;
    
    const tbody = table.querySelector('tbody');
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    const isAscending = table.dataset.sortOrder !== 'asc';
    table.dataset.sortOrder = isAscending ? 'asc' : 'desc';
    
    rows.sort((a, b) => {
        const aValue = a.cells[columnIndex].textContent.trim();
        const bValue = b.cells[columnIndex].textContent.trim();
        
        if (!isNaN(aValue) && !isNaN(bValue)) {
            return isAscending ? aValue - bValue : bValue - aValue;
        }
        
        return isAscending 
            ? aValue.localeCompare(bValue) 
            : bValue.localeCompare(aValue);
    });
    
    rows.forEach(row => tbody.appendChild(row));
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    // Start live match refresh if needed
    startLiveMatchRefresh();
    
    // Setup slug generation for forms
    setupSlugGeneration('name', 'slug');
    setupSlugGeneration('team_name', 'team_slug');
    setupSlugGeneration('player_name', 'player_slug');
    setupSlugGeneration('league_name', 'league_slug');
    
    // Add smooth scrolling
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });
    
    console.log('Playlytics initialized successfully!');
});

// Cleanup on page unload
window.addEventListener('beforeunload', function() {
    if (liveMatchRefreshInterval) {
        clearInterval(liveMatchRefreshInterval);
    }
});

// SQL Query Executor Functions
function executeSQL() {
    const query = document.getElementById('sqlQuery').value.trim();
    
    if (!query) {
        showNotification('Please enter a SQL query', 'danger');
        return;
    }
    
    // Show loading
    const resultDiv = document.getElementById('queryResult');
    resultDiv.innerHTML = '<div class="spinner"></div>';
    
    // Send query to server
    fetch('execute_query.php', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'query=' + encodeURIComponent(query)
    })
    .then(response => response.json())
    .then(data => {
        displayQueryResult(data);
    })
    .catch(error => {
        resultDiv.innerHTML = `<div class="alert alert-danger">Error: ${error.message}</div>`;
    });
}

function displayQueryResult(data) {
    const resultDiv = document.getElementById('queryResult');
    
    if (data.error) {
        resultDiv.innerHTML = `<div class="alert alert-danger">Error: ${data.error}</div>`;
        return;
    }
    
    if (data.type === 'select') {
        if (data.rows.length === 0) {
            resultDiv.innerHTML = '<div class="alert alert-info">Query executed successfully. No rows returned.</div>';
            return;
        }
        
        let html = '<div class="result-table"><table class="data-table"><thead><tr>';
        
        // Headers
        Object.keys(data.rows[0]).forEach(column => {
            html += `<th>${column}</th>`;
        });
        html += '</tr></thead><tbody>';
        
        // Rows
        data.rows.forEach(row => {
            html += '<tr>';
            Object.values(row).forEach(value => {
                html += `<td>${value !== null ? value : '<em>NULL</em>'}</td>`;
            });
            html += '</tr>';
        });
        
        html += '</tbody></table></div>';
        html += `<p style="margin-top: 1rem; color: var(--text-light);">Rows returned: ${data.rows.length}</p>`;
        
        resultDiv.innerHTML = html;
    } else {
        resultDiv.innerHTML = `
            <div class="alert alert-success">
                Query executed successfully!<br>
                ${data.affected_rows !== undefined ? `Affected rows: ${data.affected_rows}` : ''}
            </div>
        `;
    }
}

// Sample queries for SQL Executor
const sampleQueries = {
    select_all: "SELECT * FROM teams LIMIT 10;",
    join: "SELECT m.*, ht.name as home_team, at.name as away_team FROM football_matches m JOIN teams ht ON m.home_team_id = ht.id JOIN teams at ON m.away_team_id = at.id LIMIT 10;",
    count: "SELECT t.name, COUNT(p.id) as player_count FROM teams t LEFT JOIN players p ON t.id = p.team_id GROUP BY t.id ORDER BY player_count DESC;",
    subquery: "SELECT name FROM teams WHERE id IN (SELECT team_id FROM players GROUP BY team_id HAVING COUNT(*) > 5);",
    aggregate: "SELECT l.name, COUNT(DISTINCT t.id) as teams, COUNT(DISTINCT m.id) as matches FROM leagues l LEFT JOIN teams t ON l.id = t.league_id LEFT JOIN football_matches m ON l.id = m.league_id GROUP BY l.id;"
};

function loadSampleQuery(queryType) {
    const textarea = document.getElementById('sqlQuery');
    if (textarea && sampleQueries[queryType]) {
        textarea.value = sampleQueries[queryType];
    }
}
